version: "2"

networks:
  wx_o365_net:
    # name: wx_o365_net
    
volumes:  
  dynamodb-o365:
    driver: local
  config:

services: 
  webex_compliance_o365:
    build:
      context: .
      dockerfile: Dockerfile
# usage: wxt_compliance_o365.py [-h] [-v] [-f] [-n] [-m] [-c] [-w]
# 
# optional arguments:
#   -h, --help            show this help message and exit
#   -v, --verbose         Set logging level by number of -v's, -v=WARN, -vv=INFO, -vvv=DEBUG
#   -f, --file_events     Monitor file events, default: no
#   -n, --notify          Send notification when creating a new Space, default: no
#   -m, --m365_user_sync  Sync M365 Group members to Webex Team of the same name, default: no
#   -c, --check_aad_user  Check if a newly added user to a Webex Team has an account in Azure AD, default: no
#   -w, --webex_user_sync Sync Webex Team members to M365 Group of the same name, default: no
    command: python wxt_compliance_o365.py -vv -fnc #-fnmwc
    container_name: webex-compliance-o365
    depends_on:
      - dynamodb_o365
    ports:
      - "5052:5050"
    environment:
      PYTHONUNBUFFERED: 'true'
      # avoid potential certificate issues when running via proxy, see:
      # https://stackoverflow.com/questions/48391750/disable-python-requests-ssl-validation-for-an-imported-module
      CURL_CA_BUNDLE: ''
      # TESTVAR: "from_compose"
      #
      # available environment variables in the image (see what TESTVAR does)
      #
      # link to a documentation on how to connect OneDrive/SharePoint to a Space
      URL_ONEDRIVE_LINK: "https://help.webex.com/cs-cz/n4ve41eb/Webex-Link-a-Microsoft-OneDrive-or-SharePoint-Online-Folder-to-a-Space"
      # link to a company's IDM
      URL_IDM: "https://help.webex.com/cs-cz/n4ve41eb/Webex-Link-a-Microsoft-OneDrive-or-SharePoint-Online-Folder-to-a-Space"
      
      WEBEX_INTEGRATION_ID: "your_webex_integration_id"
      WEBEX_INTEGRATION_CLIENT_ID: "your_webex_integration_client_id"
      WEBEX_INTEGRATION_CLIENT_SECRET: "your_webex_integration_client_secret"
      REDIRECT_URI: "your_webex_redirect_uri" # default: "http://localhost:5050/manager"
      BOT_ACCESS_TOKEN: "your_bot_access_token"
      O365_TENANT_ID: "your_o365_tenant_id"
      O365_CLIENT_ID: "your_o365_client_id"
      O365_OBJECT_ID: "your_o365_object_id"
      O365_CLIENT_SECRET: "your_o365_client_secret"
      
      # proxy configuration
      # HTTP_PROXY: "http://proxy_address:port"
      # HTTPS_PROXY: "http://proxy_address:port"
      # NO_PROXY: "10.*.*.*,127.*.*.*,*.local"
      
      # local dynamodb
      DYNAMODB_ENDPOINT_URL: "http://dynamodb-o365:8000"
      DYNAMODB_TABLE_NAME: "o365_bot_test"
      
      # no need to change
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "dummy"
      AWS_SECRET_ACCESS_KEY: "dummy"
      WEBEX_TEAMS_ACCESS_TOKEN: "dummy"
    restart: always
    networks:
      - wx_o365_net
    volumes:
      - ./config/config.json:/config/config.json:Z # ":Z" avoids permission error in SELinux, see: https://blog.cyplo.dev/posts/2016/12/using-ad-hoc-docker-volumes-on-selinux-enabled-systems/
    image: jardamartan/webex_compliance_o365

  dynamodb_o365:
    build:
      context: .
      dockerfile: Dockerfile-dynamo
    image: dynamo-o365
    container_name: dynamodb-o365
    command: -jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data
    restart: always
    volumes:
      - dynamodb-o365:/home/dynamodblocal/data
    networks:
      - wx_o365_net
